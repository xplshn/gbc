extrn printf, sprintf;

main() {
    byte buffer[200];
    auto passed = 0;
    auto total = 0;

    printf("Escape sequence tests\n");

    printf("\nBasic escapes:\n");
    total++;
    sprintf(buffer, "newline:\n tab:\t backslash:\\ quote:\" apostrophe:'");
    if (buffer[8] == '\n' && buffer[14] == '\t' && buffer[26] == '\\' && buffer[34] == '"' && buffer[47] == '\'') {
        printf("PASS: Basic escapes\n");
        passed++;
    } else {
        printf("FAIL: Basic escapes\n");
    }

    total++;
    sprintf(buffer, "null:\000test");
    if (buffer[5] == 0) {
        printf("PASS: Octal \\000 (NULL)\n");
        passed++;
    } else {
        printf("FAIL: Octal \\000\n");
    }

    total++;
    sprintf(buffer, "esc:\033test");
    if (buffer[4] == 27) {
        printf("PASS: Octal \\033 (ESC)\n");
        passed++;
    } else {
        printf("FAIL: Octal \\033 (got %d, expected 27)\n", buffer[4]);
    }

    total++;
    sprintf(buffer, "A:\101test");
    if (buffer[2] == 65) {
        printf("PASS: Octal \\101 (ASCII A)\n");
        passed++;
    } else {
        printf("FAIL: Octal \\101 (got %d, expected 65)\n", buffer[2]);
    }

    total++;
    sprintf(buffer, "max:\377test");
    if (buffer[4] == 255) {
        printf("PASS: Octal \\377 (255)\n");
        passed++;
    } else {
        printf("FAIL: Octal \\377 (got %d, expected 255) - UTF-8 issue\n", buffer[4]);
    }

    total++;
    sprintf(buffer, "bel:\007test");
    if (buffer[4] == 7) {
        printf("PASS: Go-style \\007 (BEL)\n");
        passed++;
    } else {
        printf("FAIL: Go-style \\007 (got %d, expected 7)\n", buffer[4]);
    }

    total++;
    sprintf(buffer, "lf:\012test");
    if (buffer[3] == 10) {
        printf("PASS: Go-style \\012 (LF)\n");
        passed++;
    } else {
        printf("FAIL: Go-style \\012 (got %d, expected 10)\n", buffer[3]);
    }

    printf("\nANSI color:\n");
    total++;
    sprintf(buffer, "\033[31mRED\033[0m");
    if (buffer[0] == 27 && buffer[1] == '[' && buffer[2] == '3' && buffer[3] == '1' && buffer[4] == 'm') {
        printf("PASS: ANSI color sequence: ");
        printf(buffer);
        printf("\n");
        passed++;
    } else {
        printf("FAIL: ANSI color sequence\n");
    }

    total++;
    sprintf(buffer, "Line1\nLine2\t\033[32mGreen\033[0m\\\042End\042");
    if (buffer[5] == '\n' && buffer[11] == '\t' && buffer[12] == 27 && buffer[26] == '\\' && buffer[27] == '"') {
        printf("PASS: Mixed escapes\n");
        passed++;
    } else {
        printf("FAIL: Mixed escapes\n");
    }

    total++;
    auto esc_char = '\033';
    auto null_char = '\000';
    if (esc_char == 27 && null_char == 0) {
        printf("PASS: Character literals with Go-style octal\n");
        passed++;
    } else {
        printf("FAIL: Character literals with Go-style octal\n");
    }

    total++;
    sprintf(buffer, "a\000b\000c\000\060d");
    if (buffer[1] == 0 && buffer[3] == 0 && buffer[5] == 0 && buffer[6] == '0') {
        printf("PASS: Go-style 3-digit octal\n");
        passed++;
    } else {
        printf("FAIL: Go-style 3-digit octal\n");
    }

    total++;
    sprintf(buffer, "\001\010\077\100\177");
    if (buffer[0] == 1 && buffer[1] == 8 && buffer[2] == 63 && buffer[3] == 64 && buffer[4] == 127) {
        printf("PASS: Boundary octal values\n");
        passed++;
    } else {
        printf("FAIL: Boundary octal values\n");
    }

    printf("\nResults: %d/%d tests passed\n", passed, total);
    if (passed == total) {
        printf("All tests passed!\n");
        return (0);
    } else {
        printf("Some tests failed.\n");
        return (1);
    }
}