extrn printf;

void print_vec(label string, v []int) {
    printf("%s: [%d, %d]\n", label, v[0], v[1]);
}

void print_mat(label string, m []int) {
    printf("%s: [[%d, %d], [%d, %d]]\n", label, m[0], m[1], m[2], m[3]);
}

void vec_add(v1, v2, out_v []int) {
    out_v[0] = v1[0] + v2[0];
    out_v[1] = v1[1] + v2[1];
}

int vec_dot(v1, v2 []int) {
    //return (v1[0] * v2[0]) + (v1[1] * v2[1]);
    return ((v1[0] * v2[0]) + (v1[1] * v2[1]));
}

void mat_vec_mult(m, v, out_v []int) {
    out_v[0] = (m[0] * v[0]) + (m[1] * v[1]);
    out_v[1] = (m[2] * v[0]) + (m[3] * v[1]);
}

void mat_mult(m1, m2, out_m []int) {
    out_m[0] = (m1[0] * m2[0]) + (m1[1] * m2[2]);
    out_m[1] = (m1[0] * m2[1]) + (m1[1] * m2[3]);
    out_m[2] = (m1[2] * m2[0]) + (m1[3] * m2[2]);
    out_m[3] = (m1[2] * m2[1]) + (m1[3] * m2[3]);
}

int main() {
    int vec_a[2];
    int vec_b[2];
    int vec_result[2];
    int dot_product;

    int matrix_T[4];
    int matrix_R[4];
    int matrix_TR[4];

    printf("--- Vector & Matrix Math Demo ---\n");

    vec_a[0] = 3; vec_a[1] = 5;
    vec_b[0] = -2; vec_b[1] = 4;
    print_vec("Vector A", vec_a);
    print_vec("Vector B", vec_b);

    printf("\n--- Vector Operations ---\n");
    vec_add(vec_a, vec_b, vec_result);
    print_vec("A + B", vec_result);

    dot_product = vec_dot(vec_a, vec_b);
    printf("A . B: %d\n", dot_product);

    printf("\n--- Matrix Operations ---\n");

    matrix_R[0] = 0;  matrix_R[1] = 1;
    matrix_R[2] = -1; matrix_R[3] = 0;
    print_mat("Rotation Matrix R", matrix_R);

    matrix_T[0] = 2;  matrix_T[1] = 0;
    matrix_T[2] = 0;  matrix_T[3] = 3;
    print_mat("Scaling Matrix T", matrix_T);

    mat_vec_mult(matrix_R, vec_a, vec_result);
    print_vec("R * A", vec_result);

    mat_mult(matrix_T, matrix_R, matrix_TR);
    print_mat("T * R", matrix_TR);

    mat_vec_mult(matrix_TR, vec_b, vec_result);
    print_vec("(T * R) * B", vec_result);

    return (0);
}
