extrn putchar, getchar;

MAX_WIDTH 70;

byte line_buf[100];
byte word_buf[50];
int line_len;
int word_len;

void print_string(s byte*, len int) {
    auto i;
    i = 0;
    while (i < len) {
        putchar(s[i]);
        i++;
    }
}

void flush_line() {
    if (line_len > 0) {
        print_string(line_buf, line_len);
        putchar('\n');
    }
    line_len = 0;
}

void append_word_to_line() {
    auto i;

    if (line_len > 0) {
        line_buf[line_len] = ' ';
        line_len++;
    }

    i = 0;
    while (i < word_len) {
        line_buf[line_len] = word_buf[i];
        line_len++;
        i++;
    }
    word_len = 0;
}

main() {
    auto c;

    line_len = 0;
    word_len = 0;

    while ((c = getchar()) != -1) { // -1 == EOF
        if (c == ' ' || c == '\t' || c == '\n') {
            // Whitespace detected, process the completed word
            if (word_len > 0) {
                if (line_len + word_len + 1 > MAX_WIDTH) {
                    // Word doesn't fit, flush the current line first
                    flush_line();
                }
                append_word_to_line();
            }

            if (c == '\n') {
                // An explicit newline in the input flushes the current line
                flush_line();
            }
        } else {
            // It's a character for the current word
            if (word_len < 49) {
                word_buf[word_len] = c;
                word_len++;
            }
        }
    }

    // End of input, process any remaining word and flush the last line
    if (word_len > 0) {
        if (line_len + word_len + 1 > MAX_WIDTH) {
            flush_line();
        }
        append_word_to_line();
    }
    flush_line();

    return (0);
}
